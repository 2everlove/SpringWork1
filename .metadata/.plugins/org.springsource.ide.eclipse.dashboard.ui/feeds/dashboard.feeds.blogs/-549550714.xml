<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2021-05-15T03:35:00Z</updated>
  <entry>
    <title>SpringOne Tour: Booternetes - May 12th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/14/springone-tour-booternetes-may-12th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-15:4441</id>
    <updated>2021-05-15T03:35:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! We wrapped up the epic SpringOne Tour installment for May a couple of days ago. Here&amp;rsquo;s the Day 1 recording - &lt;em&gt;Booternetes II: The YAML Strikes Back&lt;/em&gt; - featuring yours truly, Mark Heckler, Mario Gray, David Turanski, Tiffany Jernigan, Chris Sterling, and special guest star, Kubernetes cofounder, Joe Beda. &lt;/p&gt;
&lt;p&gt;This edition pulls together a lot of different Spring ecosystem technologies, showing projects that you might use to more fully exploit the power of Kubernetes. Enjoy! &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wu38Fm56wew" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring LDAP 2.3.4 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/14/spring-ldap-2-3-4-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2021-05-14:4440</id>
    <updated>2021-05-14T22:07:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I¡¯m pleased to announce the release of Spring LDAP 2.3.4!  This release fixes including a fix where Spring LDAP breaks on JDK9+.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find the complete details in the &lt;a href="https://github.com/spring-projects/spring-ldap/releases/tag/2.3.4.RELEASE"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Data 2021.0.1 and 2020.0.9 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/14/spring-data-2021-0-1-and-2020-0-9-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2021-05-14:4439</id>
    <updated>2021-05-14T17:38:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I¡¯m pleased to announce the availability of the Spring Data service releases &lt;code&gt;2021.0.1&lt;/code&gt; and &lt;code&gt;2020.0.9&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both releases are built on top of Spring Framework &lt;code&gt;5.3.7&lt;/code&gt;. For your convenience, these releases can be consumed through Spring Boot &lt;code&gt;2.5.0&lt;/code&gt; respective &lt;code&gt;2.4.6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The service releases ship with mostly bug fixes and dependency upgrades.&lt;/p&gt;
&lt;p&gt;To round things off, here are the links to the artifacts, changelogs, and documentation:&lt;/p&gt;&lt;h2&gt;&lt;a href="#2021-0-1" class="anchor" name="2021-0-1"&gt;&lt;/a&gt;2021.0.1&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-commons/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.2.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.2.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jdbc/releases/tag/2.2.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jpa/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-geode/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.2.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.2.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-cassandra/releases/tag/3.2.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-keyvalue/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.1.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.1.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.1.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-neo4j/releases/tag/6.1.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.2.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-mongodb/releases/tag/3.2.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.3.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.3.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.3.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/releases/tag/1.3.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-ldap/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-envers/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-rest/releases/tag/3.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.5.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.5.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.5.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-redis/releases/tag/2.5.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.2.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.2.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/releases/tag/4.2.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.2.1 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.2.1"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.1/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.2.1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-couchbase/releases/tag/4.2.1"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#2020-0-9" class="anchor" name="2020-0-9"&gt;&lt;/a&gt;2020.0.9&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/commons/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-commons/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JDBC 2.1.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jdbc/2.1.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jdbc/docs/2.1.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jdbc/releases/tag/2.1.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/jpa/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-jpa/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/geode/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-geode/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 3.1.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/3.1.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/3.1.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-cassandra/releases/tag/3.1.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/keyvalue/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-keyvalue/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 6.0.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/6.0.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/neo4j/docs/6.0.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-neo4j/releases/tag/6.0.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 3.1.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/3.1.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.1.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-mongodb/releases/tag/3.1.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data R2DBC 1.2.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-r2dbc/1.2.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/r2dbc/docs/1.2.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-r2dbc/releases/tag/1.2.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/ldap/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-ldap/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/envers/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-envers/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/rest/docs/3.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-rest/releases/tag/3.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.4.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.4.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.4.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-redis/releases/tag/2.4.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 4.1.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/4.1.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.1.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/releases/tag/4.1.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 4.1.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/4.1.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/couchbase/docs/4.1.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-couchbase/releases/tag/4.1.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 4.3.9 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/4.3.9"&gt;Artifacts&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.9/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="https://docs.spring.io/spring-data/solr/docs/4.3.9/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="https://github.com/spring-projects/spring-data-solr/releases/tag/4.3.9"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Axon Framework Founder Allard Buijze on CQRS, Sagas, and more</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/13/a-bootiful-podcast-axon-framework-founder-allard-buijze-on-cqrs-sagas-and-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-14:4438</id>
    <updated>2021-05-14T01:30:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this installment &lt;a href="https://twitter.com/starbuxman"&gt;Josh Long (@starbuxman) &lt;/a&gt; talks to Axon founder &lt;a href="https://twitter.com/allardbz"&gt;Allard Buijze (@allardbz)&lt;/a&gt; about &lt;a href="https://axoniq.io/"&gt;AxonIQ (@axoniq)&lt;/a&gt;, the Axon framework, architecture patterns like CQRS and Sagas, and more.&lt;/p&gt;
&lt;iframe title="Axon Framework founder Allard Buijze on CQRS" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=nch23-103699b-pb&amp;from=pb6admin&amp;download=1&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Automate Spring Boot application deployments to Azure!</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/13/automate-spring-boot-application-deployments-to-azure" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-13:4437</id>
    <updated>2021-05-14T00:00:00Z</updated>
    <content type="html">&lt;p&gt;Today, we¡¯re excited to announce the availability of the Azure Pipeline Task for deploying Spring Boot applications to Azure Spring Cloud. You can get started by building your pipelines using the &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/how-to-cicd?pivots=programming-language-java"&gt;Azure Spring Cloud task&lt;/a&gt; to automate Spring Boot application deployments to any number of environments and Azure Regions.&lt;/p&gt;
&lt;p&gt;Over the past 18 months, we worked with many enterprise customers to learn about their scenarios including thoughts on automating end-to-end from idea to provisioning Azure resources to building Spring Boot applications to deploying those applications to production. Many of these customers have thousands of Spring Boot applications running in on-premises data centers. As they migrate these applications to the cloud, they need everything automated end-to-end to ensure repeatability and meet the requirements set forth by their IT departments and/or regulatory bodies. They require a fully-featured Continuous Integration / Continuous Delivery (CI/CD) service that can automatically deploy updated Spring Boot applications to Azure Spring Cloud. In many customer environments, they use Azure CLI in Azure Pipelines to automate Spring Boot application deployments to Azure, and they asked Microsoft for an Azure Spring Cloud task to ease their automation effort and delegate the maintenance of the deployment task to Microsoft. Now, using the new Azure Spring Cloud task, anyone can automate deployments straight to production or automate blue-green strategies to stage for testing and then set to production.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;We are pleased to see further incremental improvements and simplifications and we plan to migrate our pipelines to use the out of the box tasks soon.&amp;rdquo; ? Jonathan Jones, Lead Solutions Architect, &lt;a href="https://www.swissre.com/"&gt;Swiss Re Management Ltd.&lt;/a&gt; (Switzerland)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;Azure Spring Cloud makes Spring Boot applications easy to deploy on Azure and provides wonderful features like App Insights, network isolation using Azure virtual network, blue-green deployments that help us deploy &amp;amp; monitor our applications easily. With every release of Azure Spring Cloud, we are able to find greater ease of integration and deployment of our applications.&amp;rdquo; - Shyam Kumar Sundarakumar, Senior Solutions Architect, &lt;a href="https://www.hcltech.com/"&gt;HCL Technologies Ltd&lt;/a&gt; (India).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;The Azure Pipelines Tasks for Azure Spring Cloud greatly simplifies creating automated CI/CD pipelines to deploy spring boot apps. These new tasks have the net effect of reducing cost, effort and time as well as adding robustness to deploying Spring Boot applications. These services will help Insight to guide their clients in automating their workloads end to end in Azure Spring Cloud.&amp;rdquo; ? Dan Lange, Principal Architect, &lt;a href="https://www.insight.com/en_US/home.html"&gt;Insight&lt;/a&gt; (United States)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;With the introduction of Azure Spring Cloud Task for Azure Pipelines, Microsoft has eliminated the pain of developing and maintaining scripts for Blue-Green Deployments for Spring Boot apps in Azure. These new features will allow Kin + Carta to help customers automate the CI/CD pipeline including the creation, assignment and maintenance of Production and Staging Deployments.&amp;rdquo; ? Sudeep Moothedath, Enterprise Architect, &lt;a href="https://www.kinandcarta.com/en-us/"&gt;Kin + Carta&lt;/a&gt; (United States)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;Microsoft continues to enhance the support for Spring Cloud! With the addition of the Azure DevOps pipeline task for Azure Spring Cloud Microsoft removes another obstacle in creating a highly flexible CI/CD pipeline for Spring Cloud. The Azure DevOps pipeline tasks allow developers to deploy to Spring Cloud applications to any number of environments while focusing on their application logic and letting Microsoft focus on the infrastructure and maintenance of pipeline tasks.&amp;rdquo; ? Armando Guzman, Principal Software Engineer, Unified Commerce, &lt;a href="https://www.raleys.com/about/raleys-corporate-fact-sheet/"&gt;Raley&amp;rsquo;s&lt;/a&gt; (United States)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&amp;ldquo;We are really happy about the Azure Pipelines Task for Azure Spring Cloud. It is well integrated and makes deployments to Azure Spring Cloud easily by offering the relevant parameters for selection. They are helpful for managing our various app deployments and switch them in multiple environments without writing any CLI statements.&amp;rdquo; ? &lt;a href="https://www.linkedin.com/in/georg-deschler-2395a52/"&gt;Georg Deschler&lt;/a&gt; and Philipp Stussak (Germany) &lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#automate-blue-green-application-deployment-strategies" class="anchor" name="automate-blue-green-application-deployment-strategies"&gt;&lt;/a&gt;Automate blue-green application deployment strategies&lt;/h2&gt;
&lt;p&gt;Azure Spring Cloud Standard permits two deployments for every application. Of those two deployments, one receives &lt;em&gt;Production&lt;/em&gt; traffic. The second deployment is designated for &lt;em&gt;Staging&lt;/em&gt;. You can implement a simple blue-green strategy with Azure Spring Cloud by creating two fixed deployments for every application and automating deployments to the &lt;em&gt;Staging&lt;/em&gt; deployment. When you are confident with a deployment in &lt;em&gt;Staging&lt;/em&gt;, you can set the deployment as &lt;em&gt;Production&lt;/em&gt;. You can use the new Azure Spring Cloud task in Azure Pipelines to implement this strategy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stage 1 ? automate deployments to the Staging deployment.&lt;/strong&gt;&lt;/p&gt;
&lt;img src = "https://github.com/joshlong/blog-images/blob/master/automate-spring-boot-application-deployments-to-azure/azure-services-for-deploying-java-applications-05-12-2021.jpg?raw=true"/&gt;
&lt;p&gt;When you run the pipeline, you can watch the progress through Azure Pipelines Logs as illustrated below.&lt;/p&gt;
&lt;img src = "https://github.com/joshlong/blog-images/blob/master/automate-spring-boot-application-deployments-to-azure/azure-pipelines-logs.png?raw=true" /&gt;
&lt;p&gt;&lt;strong&gt;Stage 2: Set the previous deployment to Production.&lt;/strong&gt;&lt;/p&gt;
&lt;img src = "https://github.com/joshlong/blog-images/blob/master/automate-spring-boot-application-deployments-to-azure/azure-services-for-deploying-java-applications-2-05-12-2021.jpg?raw=true"/&gt;
&lt;p&gt;For development and test environments, where disruption is not on the critical path, you can either implement blue-green deployment strategies or you can directly deploy applications to deployments that are receiving &lt;em&gt;Production&lt;/em&gt; traffic. The new Azure Spring Cloud task also supports deploying applications to deployments that are receiving Production traffic.&lt;/p&gt;&lt;h2&gt;&lt;a href="#automate-end-to-end-from-idea-to-production" class="anchor" name="automate-end-to-end-from-idea-to-production"&gt;&lt;/a&gt;Automate end-to-end ? from idea to production&lt;/h2&gt;
&lt;p&gt;When you deploy Spring Boot applications to Azure Spring Cloud and Azure, you can build end-to-end automation from idea to provisioning Azure resources to building Spring Boot applications to deploying those applications to production using any automation tools and platforms of your choice ? such as Azure DevOps, Jenkins, Maven or Gradle. You can apply this automation strategy to any environment, including development, test and production, and any region.&lt;/p&gt;
&lt;p&gt;Typically, developers automate end-to-end by using multiple pipelines which are broadly classified into three categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Provision&lt;/strong&gt; ? automate provisioning Azure resources using &lt;a href="https://github.com/Azure/azure-spring-cloud-reference-architecture/tree/main/terraform/brownfield-deployment"&gt;Terraform&lt;/a&gt;, &lt;a href="https://github.com/Azure/azure-spring-cloud-reference-architecture/tree/main/ARM/brownfield-deployment"&gt;ARM template&lt;/a&gt; and/or &lt;a href="https://github.com/Azure/azure-spring-cloud-reference-architecture/tree/main/CLI/brownfield-deployment"&gt;Azure CLI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Build&lt;/strong&gt; ? automate building and storing binary artifacts such as JARs and WARs using Maven or Gradle&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deploy&lt;/strong&gt; ? automate deployments using Azure Pipelines, GitHub Actions and Azure CLI. Blue-green deployment strategies without any disruption to production traffic are very popular. Developers who use Azure Pipelines can leverage the new Azure Spring Cloud task to automate blue-green deployment strategies.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src = "https://github.com/joshlong/blog-images/blob/master/automate-spring-boot-application-deployments-to-azure/automate-from-idea-to-production-2.jpg?raw=true" /&gt;&lt;h2&gt;&lt;a href="#learn-more-about-azure-spring-cloud-and-start-building-and-automating-today" class="anchor" name="learn-more-about-azure-spring-cloud-and-start-building-and-automating-today"&gt;&lt;/a&gt;Learn more about Azure Spring Cloud and start building and automating today!&lt;/h2&gt;
&lt;p&gt;Azure Spring Cloud is jointly built, operated, and supported by Microsoft and VMware. It is a fully managed service for Spring Boot applications. Azure Spring Cloud abstracts away the complexity of infrastructure management and Spring Cloud middleware management, so you can focus on building your business logic and let Azure take care of dynamic scaling, patches, security, compliance, and high availability. With a few steps, you can provision Azure Spring Cloud, create applications, deploy, and scale Spring Boot applications, automate end-to-end and start monitoring in minutes. We¡¯ll continue to bring more developer-friendly and enterprise-ready features to Azure Spring Cloud. &lt;/p&gt;
&lt;p&gt;Get started with the &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/how-to-cicd?pivots=programming-language-java"&gt;Azure Spring Cloud task&lt;/a&gt; for Azure Pipelines to automate Spring Boot application deployments and these resources below!&lt;/p&gt;&lt;h2&gt;&lt;a href="#resources" class="anchor" name="resources"&gt;&lt;/a&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Learn using an &lt;a href="https://docs.microsoft.com/en-us/learn/modules/azure-spring-cloud-workshop/"&gt;Microsoft Learn module&lt;/a&gt; or &lt;a href="https://github.com/microsoft/azure-spring-cloud-training"&gt;self-paced workshop&lt;/a&gt; on GitHub&lt;/li&gt;
  &lt;li&gt;Learn &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/"&gt;more&lt;/a&gt; about implementing solutions on Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/Azure-Samples/spring-petclinic-microservices"&gt;Deploy&lt;/a&gt; a distributed version of Spring Petclinic built with Spring Cloud&lt;/li&gt;
  &lt;li&gt;Learn about how to &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/how-to-cicd?pivots=programming-language-java"&gt;Automate Application Deployments to Azure Spring Cloud &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Learn about &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/concepts-blue-green-deployment-strategies"&gt;Blue-Green Deployment Strategies in Azure Spring Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reference document ? &lt;a href="https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/azure-spring-cloud?view=azure-devops"&gt;Azure Spring Cloud task for Azure Pipelines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Deploy Spring Boot applications by leveraging enterprise best practices ? &lt;a href="https://docs.microsoft.com/en-us/azure/spring-cloud/reference-architecture"&gt;Azure Spring Cloud Reference Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Migrate your &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-boot-to-azure-spring-cloud"&gt;Spring Boot&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-spring-cloud-to-azure-spring-cloud"&gt;Spring Cloud&lt;/a&gt;, and &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/migration/migrate-tomcat-to-azure-spring-cloud"&gt;Tomcat&lt;/a&gt; applications to Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;Wire Spring applications &lt;a href="https://docs.microsoft.com/en-us/azure/developer/java/spring-framework/"&gt;to interact with Azure services &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;For feedback and questions, please &lt;a href="mailto:AzureSpringCloud-Talk@service.microsoft.com"&gt;e-mail us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring HATEOAS 1.2.6 and 1.3.1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/12/spring-hateoas-1-2-6-and-1-3-1-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oliver Drotbohm</name>
    </author>
    <id>tag:spring.io,2021-05-12:4436</id>
    <updated>2021-05-12T22:10:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the Spring community I&amp;#8217;d like to announce the availability of Spring HATEOAS 1.2.6 and 1.3.1. The releases contain general bugfixes and are scheduled for inclusion in the upcoming Spring Boot service releases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Find the detailed changelogs for 1.2.6 &lt;a href="https://github.com/spring-projects/spring-hateoas/releases/tag/1.2.6"&gt;here&lt;/a&gt; and the one for 1.3.1 &lt;a href="https://github.com/spring-projects/spring-hateoas/releases/tag/1.3.1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-hateoas/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-hateoas"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-hateoas/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-hateoas/docs/1.3.1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-hateoas"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-hateoas"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.3.7 and 5.2.15 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/11/spring-framework-5-3-7-and-5-2-15-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>St?phane Nicoll</name>
    </author>
    <id>tag:spring.io,2021-05-12:4435</id>
    <updated>2021-05-12T13:21:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone who has contributed, I am pleased to announce that Spring Framework &lt;code&gt;5.3.7&lt;/code&gt; and &lt;code&gt;5.2.15&lt;/code&gt; are available now.&lt;/p&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.3.7&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7"&gt;45 fixes and improvements&lt;/a&gt;. Spring Framework &lt;code&gt;5.2.15&lt;/code&gt; includes &lt;a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE"&gt;9 selected fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Stay tuned for follow-up Spring Boot releases later this week.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.3.7/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - May 11th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/11/this-week-in-spring-may-11th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-12:4434</id>
    <updated>2021-05-12T00:57:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! First: a happy belated mother&amp;rsquo;s day to you! Being a mom is already the hardest job, and it got considerably harder this last year as a global pandemic descended on the world forcing so many new complications on an already fraught enterprise: raising a family. So, thank you, moms. (Also: you deserve far more than just a day!) &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Have you registered for tomorrow&amp;rsquo;s brand new (_free_!) &lt;a href="https://twitter.com/vmwaretanzu/status/1392168130814824451?s=21"&gt;SpringOne Tour installment&lt;/a&gt;? Don&amp;rsquo;t miss this! It&amp;rsquo;s going to be a jam packed exploration of using Spring to expand the opportunities implied by Kubernetes with yours truly, Mark Heckler, Mario Gray, Nate Schutta, David Turanski, Tiffany Jernigan and Chris Sterling.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/06/a-bootiful-podcast-friend-fellow-spring-developer-advocate-kotlin-google-developer-expert-and-java-champion-mark-heckler"&gt;A Bootiful Podcast: Friend, fellow Spring Developer Advocate, Kotlin Google Developer Expert, and Java Champion, Mark Heckler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/javaatmicrosoft/status/1392162587870040067?s=12"&gt;Check out the recording of my talk with Microsoft&amp;rsquo;s Julien Dubois, and Rory Preddy&lt;/a&gt; on Azure Spring Cloud&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.vmware.com/vmworld/2021/05/five-compelling-reasons-to-submit-a-proposal-to-speak-at-vmworld-2021.html"&gt;Five compelling reasons to submit a proposal to speak at VMworld 2021&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/kviglucci/status/1391462401128734722"&gt;Kevin Viglucci on Twitter: &amp;quot;Just merged a PR that adds the start of a guides section to the #RSocket website. This includes an initial pass at an rsocket-js guide. Hopefully adding other language impls as time allows. Please don&amp;rsquo;t hesitate to provide feed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/10/spring-authorization-server-0-1-1-available-now"&gt;Spring Authorization Server 0.1.1 available now&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/04/spring-cloud-gateway-for-kubernetes"&gt;Spring Cloud Gateway for Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/10/springone-tour-booternetes-europe"&gt;SpringOne Tour Booternetes Europe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/gamussa/status/1390540039663362049?s=12"&gt;They¡¯re going to be publishing a Spring for Kafka course soon!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved this video that, among other things, &lt;a href="https://www.youtube.com/watch?v=UYyf0uzOez0"&gt;looked at the new Java records&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>SpringOne Tour Booternetes Europe</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/10/springone-tour-booternetes-europe" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-11:4433</id>
    <updated>2021-05-11T07:36:00Z</updated>
    <content type="html">&lt;p&gt;Michael Cote, Hannah Foxwell, and Jakub Pilimon talk about application modernization strategies while driving production outcomes with Spring on Kubernetes. For more great Tanzu, Kubernetes, and Spring content, check out our VMware Tanzu channel: &lt;a href="https://www.youtube.com/c/VMwareTanzu"&gt;https://www.youtube.com/c/VMwareTanzu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VMware Tanzu helps you modernize your applications and infrastructure with a common goal: deliver better software to production, continuously. The portfolio simplifies multi-cloud operations while freeing developers to move faster and access the right resources for building the best applications. VMware Tanzu enables development and operations teams to work together in new ways that deliver transformative business results. Learn more here: &lt;a href="https://tanzu.vmware.com/"&gt;https://tanzu.vmware.com/&lt;/a&gt; and follow us on Twitter, LinkedIn, and Facebook.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Gp8rgshU2Ho" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Authorization Server 0.1.1 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/10/spring-authorization-server-0-1-1-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Joe Grandja</name>
    </author>
    <id>tag:spring.io,2021-05-10:4432</id>
    <updated>2021-05-10T17:38:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the team and everyone who has contributed, it is my pleasure to announce the general availability of Spring Authorization Server 0.1.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can download it from &lt;a href="https://repo.spring.io/release/"&gt;repo.spring.io&lt;/a&gt; and Maven Central by using the module coordinates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="groovy"&gt;compile 'org.springframework.security.experimental:spring-security-oauth2-authorization-server:0.1.1'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For additional details on this new project, see the &lt;a href="https://spring.io/blog/2020/04/15/announcing-the-spring-authorization-server"&gt;initial announcement&lt;/a&gt; and &lt;a href="https://github.com/spring-projects-experimental/spring-authorization-server"&gt;project page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The main features delivered in this release are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OpenID Connect Dynamic Client Registration 1.0&amp;#8201;&amp;#8212;&amp;#8201;&lt;a href="https://openid.net/specs/openid-connect-registration-1_0.html#ClientRegistration"&gt;Client Registration Endpoint&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc7662"&gt;OAuth 2.0 Token Introspection&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://datatracker.ietf.org/doc/html/rfc8414"&gt;OAuth 2.0 Authorization Server Metadata&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects-experimental/spring-authorization-server/releases/tag/0.1.1"&gt;release notes&lt;/a&gt; for complete details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To get started using Spring Authorization Server, see the &lt;a href="https://github.com/spring-projects-experimental/spring-authorization-server/tree/master/samples/boot/oauth2-integration"&gt;sample&lt;/a&gt; to become familiar with setup and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We would love to gather your feedback as we strive to improve and build upon this release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects-experimental/spring-authorization-server"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects-experimental/spring-authorization-server/issues"&gt;GitHub Issues&lt;/a&gt; |  &lt;a href="https://app.zenhub.com/workspaces/authorization-server-5e8f3182b5e8f5841bfc4902/board?repos=248032165"&gt;ZenHub Board&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Friend, fellow Spring Developer Advocate, Kotlin Google Developer Expert, and Java Champion, Mark Heckler</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/06/a-bootiful-podcast-friend-fellow-spring-developer-advocate-kotlin-google-developer-expert-and-java-champion-mark-heckler" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-07:4430</id>
    <updated>2021-05-07T05:13:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of A Bootiful Podcast! This week, &lt;a href="https://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to his friend, fellow Spring Developer Advocate, Kotlin Google Developer Expert, and Java Champion: &lt;a href="https://twitter.com/mkheck"&gt;Mark Heckler (@mkheck)&lt;/a&gt;. Mark has also just written a well-recommended book from O&amp;rsquo;Reilly called Spring Boot: Up and Running.&lt;/p&gt;
&lt;iframe title="Friend, fellow Spring Developer Advocate, Kotlin Google Developer Expert, and Java Champion, Mark Heckler" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=sq3tr-102cb62-pb&amp;from=pb6admin&amp;download=1&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - May 4th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/04/this-week-in-spring-may-4th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-05-05:4429</id>
    <updated>2021-05-05T07:49:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! How&amp;rsquo;re you doing? I hope you&amp;rsquo;re doing well, and that the Fourth (of May) is with you. &lt;/p&gt;
&lt;p&gt;Today may be the 4th, but yesterday was the third of May, and that marks the 20th anniversary of the &lt;code&gt;JdbcTemplate&lt;/code&gt;, which I think is super cool! &lt;a href="https://twitter.com/starbuxman/status/1389497863009280000"&gt;Happy birthday, &lt;code&gt;JdbcTemplate&lt;/code&gt;&lt;/a&gt;! The &lt;code&gt;JdbcTemplate&lt;/code&gt; was important to a &lt;a href="https://twitter.com/NewpPaul/status/1389526918010228739"&gt;lot&lt;/a&gt; &lt;a href="https://twitter.com/microwatts/status/1389510296876855298"&gt;of&lt;/a&gt; &lt;a href="https://twitter.com/naveenkumaran_a/status/1389743476607127553"&gt;people&lt;/a&gt; &lt;a href="https://twitter.com/microwatts/status/1389510296876855298"&gt;because&lt;/a&gt; it&amp;rsquo;s one of those great little utilities that made it easy to justify pulling Spring into applications almost two decades ago. It also helped people learn a lot about some of the design patterns that Spring was trying to make commonplace. &lt;/p&gt;
&lt;p&gt;As usual, we&amp;rsquo;ve got a ton of stuff to get to, so let&amp;rsquo;s begin! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don&amp;rsquo;t miss next &lt;a href="https://tanzu.vmware.com/developer/tv/springone-tour/0016/"&gt;week&amp;rsquo;s SpringOne Tour event&lt;/a&gt;! There&amp;rsquo;s a 90m presentation and then, on day two, a workshop. You&amp;rsquo;ll be able to hang out with all of us on both days and we&amp;rsquo;ll do our best to answer your questions.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/04/29/a-bootiful-podcast-oracle-s-dilip-krishnan-about-spring-fox-the-oracle-cloud-lift-team-and-more"&gt;A Bootiful Podcast: Oracle&amp;rsquo;s Dilip Krishnan about Spring Fox, the Oracle Cloud Lift team, and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/mraible/status/1388191785462243336?s=12"&gt;A cool tutorial on JHipster 7!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://go.mariadb.com/21Q2-WBN-GLBL-OSSG-R2DBC-Connector-2021-01-13_Registration-LP.html"&gt;Creating fully reactive applications with R2DBC and MariaDB&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=oq5FcnqEMxk&amp;list=PL3TSF5whlprUTnpP9drAl-knNUnPqKrui&amp;index=3&amp;t=19s"&gt;I did a talk for the DevX conference, &amp;ldquo;Cloud Native Java,&amp;rdquo; in 20 minutes! Watch it here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/brunoborges/status/1388306415572242437?s=12"&gt;In which Mr. Spring, Juergen Hoeller himself, looks at the future of Spring Framework and Java modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/04/spring-cloud-gateway-for-kubernetes"&gt;Spring Cloud Gateway for Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/05/03/spring-security-5-5-0-rc2-released"&gt;Spring Security 5.5.0-RC2 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.vmware.com/company/news/releases/vmw-newsfeed.U.S.-Army-Futures-Command-Partners-with-VMware-to-Create-Software-Factory.d92466ce-df4e-4a39-a075-75a6bd4706a0.html"&gt;U.S. Army Futures Command Partners with VMware to Create Software Factory&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/04/28/webinar-accelerate-spring-apps-to-cloud-at-scale"&gt;Webinar: Accelerate Spring Apps to Cloud at Scale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Gateway for Kubernetes</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/04/spring-cloud-gateway-for-kubernetes" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Haytham Mohamed</name>
    </author>
    <id>tag:spring.io,2021-05-01:4427</id>
    <updated>2021-05-05T04:06:00Z</updated>
    <content type="html">&lt;p&gt;The &lt;a href="https://docs.pivotal.io/scg-k8s/1-0/"&gt;Spring Cloud Gateway&lt;/a&gt; (SCG) open-source project has been extended and offered commercially for the &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt; platform. This new offering lets you automate the deployment of an API gateway service by applying YAML configuration objects to a Kubernetes cluster. You can also update the routes of API gateways in Kubernetes by applying YAML configuration to the cluster.&lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway for Kubernetes supports routing to services that are written in any language, as long as they expose HTTP endpoints. A Kubernetes operator is offered to handle creating and configuring a gateway instance by applying defined custom resources to the cluster. You can dynamically configure a spawned SCG instance in a Kubernetes platform to enable API route updates for a continuous integration (CI) and continuous delivery (CD) pipeline. Furthermore, the SCG for Kubernetes offers commercial API route filters for Single Sign-On (SSO) authentication, role-based access control, scopes authorization, authorized token relay, client certificate authorization, rate limiting, and circuit breaker. SCG instances in a Kubernetes platform run with high availability and adjustable settings for memory and vCPU resources consumption. &lt;/p&gt;
&lt;p&gt;Spring Cloud Gateway for Kubernetes is easy to install and use. In this blog. I show how to install SCG for Kubernetes in a local development environment and show how to create and configure a gateway instance with routes. You need to have both &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and the &lt;a href="https://helm.sh/"&gt;Helm&lt;/a&gt; command-line interface (CLI) tools installed. Let us first start by setting up an environment with a local Kubernetes cluster. It would be also helpful to configure the cluster with a local Docker registry and ingress controller. We can use &lt;a href="https://kind.sigs.k8s.io/"&gt;KinD&lt;/a&gt; to create a local cluster. You can install KinD from &lt;a href="https://kind.sigs.k8s.io/docs/user/quick-start/#installation"&gt;here&lt;/a&gt;. First, we spin off a local registry (named &lt;code&gt;myregistry&lt;/code&gt;) with port 5000 by using the ¡°registry¡± docker image as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ Docker run -d ?restart=always -p ¡°127.0.0.1:5000¡± ?name myregistry registry:2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use the command below to create a new KinD cluster named &lt;code&gt;mycluster&lt;/code&gt;. The cluster consists of two nodes, one as a control plane node and the other as a workload node with port 80 and 443 mapped to your host to ingress into the cluster. The cluster is configured to use the above local Docker registry.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ cat &amp;lt;&amp;lt;EOF | kind create cluster --config=-&#xD;
kind: Cluster&#xD;
apiVersion: kind.x-k8s.io/v1alpha4&#xD;
containerdConfigPatches:&#xD;
- |-&#xD;
  [plugins.&amp;quot;io.containerd.grpc.v1.cri&amp;quot;.registry.mirrors.&amp;quot;localhost:5000&amp;quot;]&#xD;
    endpoint = [&amp;quot;http://myregistry:5000&amp;quot;]&#xD;
nodes:&#xD;
- role: control-plane&#xD;
- role: worker&#xD;
  kubeadmConfigPatches:&#xD;
  - |&#xD;
    kind: JoinConfiguration&#xD;
    nodeRegistration:&#xD;
      kubeletExtraArgs:&#xD;
        node-labels: &amp;quot;ingress-ready=true&amp;quot;&#xD;
  extraPortMappings:&#xD;
  - containerPort: 80&#xD;
    hostPort: 80&#xD;
    protocol: TCP&#xD;
  - containerPort: 443&#xD;
    hostPort: 443&#xD;
    protocol: TCP&#xD;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to connect the registry to the cluster network by using the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ docker network connect mycluster myregistry || true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, you need to create a Kubernetes ConfigMap to configure the local registry in the cluster: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ cat &amp;lt;&amp;lt;EOF | kubectl apply -f -&#xD;
apiVersion: v1&#xD;
kind: ConfigMap&#xD;
metadata:&#xD;
  name: local-registry-hosting&#xD;
  namespace: kube-public&#xD;
data:&#xD;
  localRegistryHosting.v1: |&#xD;
    host: &amp;quot;localhost:5000&amp;quot;&#xD;
    help: &amp;quot;https://kind.sigs.k8s.io/docs/user/local-registry/&amp;quot;&#xD;
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, you should have your local development environment ready with a tiny cluster to use. Now we can look into how to deploy SCG for Kubernetes. Provided that you have a license and access, you can download the installer of SCG for Kubernetes from VMware Tanzu Network. We are going to download the current version (1.0.0) of the installer and extract it to a folder. You need to first allocate Spring Cloud Gateway for Kubernetes docker images to the docker registry we installed in localhost at port 5000. From the extracted folder, run the image relocation script that is located in the &lt;code&gt;scripts&lt;/code&gt; directory. This command pulls, tags, and pushes the images to the docker registry:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ ./scripts/relocate-images.sh localhost:5000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Complete the installation by running the script below. By default, the Spring Cloud Gateway for Kubernetes operator and backing applications are deployed in the &lt;code&gt;spring-cloud-gateway&lt;/code&gt; namespace. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ ./scripts/ install-spring-cloud-gateway.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can now create a gateway instance in the cluster. A new SCG instance is spawned with a &lt;code&gt;SpringCloudGateway&lt;/code&gt; CRD, a new route is defined with a &lt;code&gt;SpringCloudGatewayRouteConfig&lt;/code&gt; CRD, and a &lt;code&gt;SpringCloudGatewayMapping&lt;/code&gt; CRD configures a gateway with routes.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://static.spring.io/blog/haythamm/20210505/k8s-types.png" alt="image link" /&gt;&lt;/p&gt;
&lt;p&gt;For example, you can create a file called &lt;code&gt;gateway-config.yaml&lt;/code&gt; with the following YAML definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, yaml]"&gt;apiVersion: tanzu.vmware.com/v1&#xD;
kind: SpringCloudGateway&#xD;
metadata:&#xD;
  name: my-gateway
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, apply this definition to your Kubernetes cluster:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ kubectl apply -f gateway-config.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This configuration creates a new Gateway instance (by default, the Gateway instance is created in the current namespace). To add routes and to map the routes to the gateway, we need to create a &lt;code&gt;SpringCloudGatewayRouteConfig&lt;/code&gt; object that describes the routes and a &lt;code&gt;SpringCloudGatewayMapping&lt;/code&gt; object that maps the route configuration to the gateway. Create a file called &lt;code&gt;route-config.yaml&lt;/code&gt; with the following YAML definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, yaml]"&gt;apiVersion: tanzu.vmware.com/v1&#xD;
kind: SpringCloudGatewayRouteConfig&#xD;
metadata:&#xD;
  name: my-gateway-routes&#xD;
spec:&#xD;
  routes:&#xD;
  - id: test-route&#xD;
    uri: https://github.com&#xD;
    predicates:&#xD;
      - Path=/github/**&#xD;
    filters:&#xD;
      - StripPrefix=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create a file called &lt;code&gt;mapping.yaml&lt;/code&gt; with the following YAML definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, yaml]"&gt;apiVersion: tanzu.vmware.com/v1&#xD;
kind: SpringCloudGatewayMapping&#xD;
metadata:&#xD;
  name: test-gateway-mapping&#xD;
spec:&#xD;
  gatewayRef:&#xD;
    name: my-gateway&#xD;
  routeConfigRef:&#xD;
    name: my-gateway-routes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apply both definitions to your Kubernetes cluster to configure the gateway with the defined routes. Following these steps lets you route to APIs either inside or outside a Kubernetes platform. For example, you can configure a SCG to route to different backend collaborating APIs from an exposed frontend API. &lt;/p&gt;
&lt;p&gt;&lt;img src="https://static.spring.io/blog/haythamm/20210505/k8s-architecture.png" alt="image link" /&gt;&lt;/p&gt;
&lt;p&gt;The above illustrating gateway is configured to route to GitHub. You can install an ingress controller to reach the gateway from outside the cluster. For example, you can install &lt;code&gt;nginx&lt;/code&gt; ingress controller as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, shell]"&gt;$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/kind/deploy.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And then you can create an ingress to reach out to the gateway. The created ingress below uses &lt;code&gt;/gateway&lt;/code&gt; as a path to the internal Kubernetes gateway service &lt;code&gt;my-gateway&lt;/code&gt; on port 80.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint [source, yaml]"&gt;apiVersion: networking.k8s.io/v1&#xD;
kind: Ingress&#xD;
metadata:&#xD;
  name: gateway-ingress&#xD;
  annotations:&#xD;
    nginx.ingress.kubernetes.io/rewrite-target: /$2&#xD;
spec:&#xD;
  ingressClassName: nginx&#xD;
  rules:&#xD;
    - http:&#xD;
        paths:&#xD;
          - path: /gateway(/|$)(.*)&#xD;
            pathType: Prefix&#xD;
            backend:&#xD;
              service:&#xD;
                name: my-gateway&#xD;
                port:&#xD;
                  number: 80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that, you will be able to launch GitHub through the configured gateway using &lt;code&gt;http://localhost/gateway/github&lt;/code&gt;&lt;/p&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.5.0-RC2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/05/03/spring-security-5-5-0-rc2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2021-05-04:4428</id>
    <updated>2021-05-04T03:38:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I¡¯m pleased to announce the release of Spring Security 5.5.0-RC2!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;After releasing 5.5.0-RC1 we received some feedback on our APIs that required further refinements. This release finalizes the APIs for the 5.5.0 release later this month.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find the complete details in the &lt;a href="https://github.com/spring-projects/spring-security/releases/tag/5.5.0-RC2"&gt;release notes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Oracle's Dilip Krishnan about Spring Fox, the Oracle Cloud Lift team, and more</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/29/a-bootiful-podcast-oracle-s-dilip-krishnan-about-spring-fox-the-oracle-cloud-lift-team-and-more" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-04-30:4426</id>
    <updated>2021-04-30T05:33:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of A Bootiful Podcast. In this installment, &lt;a href="https://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talk to Oracle&amp;rsquo;s &lt;a href="https://twitter.com/dilipkrish"&gt;Dilip Krishnan (@dilipkrish)&lt;/a&gt; about Spring Fox, the Oracle Cloud Lift team, and so much more. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://springfox.io"&gt;SpringFox website - http://springfox.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/cloud/cloud-lift/"&gt;Oracle cloud lift - https://www.oracle.com/cloud/cloud-lift/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A cool project that needs some love - &lt;a href="https://dev.to/cbornet/ohm-the-mediatype-for-rest-hateoas-powered-by-openapi-2aba"&gt;ohm&lt;/a&gt; from OSS contributor Christophe Bornet, one of the key contributors to &lt;a href="https://www.jhipster.tech"&gt;JHipster&lt;/a&gt; and &lt;a href="https://openapi-generator.tech/docs/core-team/"&gt;OpenAPI Generator&lt;/a&gt; &lt;/p&gt;
&lt;iframe title="Oracle's Dilip Krishnan on SpringFox, the Oracle Cloud Lift team, and more" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=aqr9y-10221ad-pb&amp;from=pb6admin&amp;download=1&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Accelerate Spring Apps to Cloud at Scale</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/28/webinar-accelerate-spring-apps-to-cloud-at-scale" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-04-29:4425</id>
    <updated>2021-04-29T13:10:00Z</updated>
    <content type="html">&lt;p&gt;Ready to take Spring Boot apps to the happiest place on earth - production at enterprise scale - with Azure Spring Cloud and without worrying about infrastructure, application life cycle, monitoring, container intricacies, Kubernetes. Join &lt;strong&gt;Microsoft&amp;rsquo;s Asir Vedamuthu Selvasingh (&lt;a href="https://twitter.com/asirselvasingh"&gt;@asirselvasingh&lt;/a&gt;)&lt;/strong&gt;, next week, at &lt;strong&gt;10-11 AM CT, May 4th, 2021&lt;/strong&gt;, and learn how enterprise leaders:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Run Spring apps in the cloud at enterprise scale.&lt;/li&gt;
  &lt;li&gt;Improve developer productivity with DevOps tooling integration and continuous integration and continuous deployment.&lt;/li&gt;
  &lt;li&gt;Enforce a Zero Trust security model with secrets management, secure communications, and virtual networks.&lt;/li&gt;
  &lt;li&gt;Keep an eye on production and quickly troubleshoot issues with monitoring tools of your choice.&lt;/li&gt;
  &lt;li&gt;Drive higher utilization of resources and pay only for what you use with Autoscale.&lt;/li&gt;
  &lt;li&gt;Deliver value faster to their end customers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://aka.ms/spring-cloud"&gt;&lt;strong&gt;REGISTER HERE&lt;/strong&gt;&lt;/a&gt; for this hands on workshop&lt;/p&gt;
&lt;div style = "background-color:white;    width : 300px; height: 300px ; border:   10px solid white; "&gt;&lt;img&#xD;
 style = " width : 300px; height: 300px "&#xD;
 src = "https://rapidtech.s3.amazonaws.com/assets/p_assets/internalTemplates/square.png" /&gt;&#xD;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - April 27th, 2021</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/27/this-week-in-spring-april-27th-2021" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-04-28:4424</id>
    <updated>2021-04-28T05:41:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! We&amp;rsquo;ve got a &lt;em&gt;ton&lt;/em&gt; to get into, so let&amp;rsquo;s gooo!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1384914839005401095"&gt;Learn how to enable asynchronous messaging at cloud scale in Spring Boot Java apps using Java Message Service (JMS) API and Azure Service Bus. &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In last week&amp;rsquo;s, &lt;a href="http://bootifulpodcast.fm"&gt;&lt;em&gt;A Bootiful Podcast&lt;/em&gt;,&lt;/a&gt; I talked to &lt;a href="https://spring.io/blog/2021/04/22/a-bootiful-podcast-reliably-ceo-russ-miles"&gt;Reliably CEO Russ Miles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring-boot-cnb-hol-en.apps.pcfone.io/#0"&gt;An awesome hands-on-lab of using Cloud Native buildpacks with Spring Boot by Toshiaki Maki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/ghillert/status/1385033192554389504?s=12"&gt;Check out Sam Brannan¡¯s epic wiki page on meta programming with Spring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/maciejwalkowiak/status/1385182840334258178"&gt;I love this utility for Google Chrome-using Spring Boot developers from Spring Cloud AWS contributor and legend Maciej Walkowiak: a tiny extension that points you to the current version of the Spring documentation.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.5.0-RC1"&gt;Check out the release notes for Spring Boot 2.5.0-RC1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/04/21/spring-cloud-hoxton-sr11-has-been-released"&gt;Spring Cloud Hoxton.SR11 has been released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2021/04/20/what-s-new-in-spring-data-2021-0"&gt;What&amp;rsquo;s new in Spring Data 2021.0?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/microsoft/codetour"&gt;microsoft/codetour: VS Code extension that allows you to record and play back guided tours of codebases, directly within the editor.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kubernetes.io/blog/2021/04/22/evolving-kubernetes-networking-with-the-gateway-api/"&gt;Blog: Evolving Kubernetes networking with the Gateway API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kubernetes.io/blog/2021/04/21/graceful-node-shutdown-beta/"&gt;Blog: Graceful Node Shutdown Goes Beta&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kubernetes.io/blog/2021/04/23/kubernetes-release-1.21-metrics-stability-ga/"&gt;Blog: Kubernetes 1.21: Metrics Stability hits GA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.mscharhag.com/java/vector-api"&gt;Looking into the JDK 16 vector API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/JavaAtMicrosoft/status/1385285107708141573"&gt;Microsoft Build of OpenJDK 11.0.11 and 16.0.1 (EA) Now Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://www.oracle.com/java/technologies/java-se-support-roadmap.html"&gt;Oracle Java SE Support Roadmap - Oracle is offering extended support for Java 8 until 2030&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blogs.oracle.com/javamagazine/mastering-the-mechanics-of-java-method-invocation"&gt;This is an interesting article by Ben Evans on how the JVM executes bytecode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>A Bootiful Podcast: Reliably CEO Russ Miles</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/22/a-bootiful-podcast-reliably-ceo-russ-miles" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2021-04-23:4423</id>
    <updated>2021-04-23T07:08:00Z</updated>
    <content type="html">&lt;p&gt;Hi, Spring fans! In this episode, &lt;a href="https://twitter.com/starbuxman"&gt;Josh Long (@starbuxman)&lt;/a&gt; talks to Reliably CEO &lt;a href="https://twitter.com/russmiles"&gt;Russ Miles (@russmiles)&lt;/a&gt; about COVID, chaos engineering, reliable systems engineering and so much more.&lt;/p&gt;
&lt;iframe title="Reliably CEO Russ Miles" allowtransparency="true" height="150" width="100%" style="border: none; min-width: min(100%, 430px);" scrolling="no" data-name="pb-iframe-player" src="https://www.podbean.com/player-v2/?i=n6gjd-1017ea4-pb&amp;from=pb6admin&amp;download=1&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;btn-skin=7"&gt;&lt;/iframe&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Hoxton.SR11 has been released</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/21/spring-cloud-hoxton-sr11-has-been-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Haytham Mohamed</name>
    </author>
    <id>tag:spring.io,2021-04-22:4422</id>
    <updated>2021-04-22T05:59:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I am pleased to announce that the Service Release 11 (SR11) of the &lt;a href="https://cloud.spring.io"&gt;Spring Cloud Hoxton&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href="https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/Hoxton.SR11/"&gt;Maven Central&lt;/a&gt;. You can check out the Hoxton &lt;a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes"&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#notable-changes-in-the-hoxton-release-train" class="anchor" name="notable-changes-in-the-hoxton-release-train"&gt;&lt;/a&gt;Notable Changes in the Hoxton Release Train&lt;/h2&gt;
&lt;p&gt;See all issues included in this release &lt;a href="https://github.com/orgs/spring-cloud/projects/57"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This was primarily a bug fix and documentation release. Hoxton.SR11 is compatible with Spring Boot 2.3.x and 2.2.x.&lt;/p&gt;&lt;h3&gt;&lt;a href="#spring-cloud-commons" class="anchor" name="spring-cloud-commons"&gt;&lt;/a&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/issues/873"&gt;Add LoadBalancerRequestTransformer for WebClient-backed load-balancing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-gateway" class="anchor" name="spring-cloud-gateway"&gt;&lt;/a&gt;Spring Cloud Gateway&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/2153"&gt;Adds support for evicting connections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-openfeign" class="anchor" name="spring-cloud-openfeign"&gt;&lt;/a&gt;Spring Cloud OpenFeign&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/530"&gt;Upgrade Feign to 10.12&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/486"&gt;Add support for Apache HC5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/502"&gt;Support Pageable, Sort annotated as SpringQueryMap to use with RequestBody&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/493"&gt;Add &lt;code&gt;FeignClientProperties.FeignClientConfiguration.followRedirects&lt;/code&gt; property&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/357"&gt;Improve &lt;code&gt;SpringEncoder&lt;/code&gt; Charset determination&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/issues/471"&gt;Support multiple qualifiers in &lt;code&gt;FeignClient&lt;/code&gt; annotation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-config" class="anchor" name="spring-cloud-config"&gt;&lt;/a&gt;Spring Cloud Config&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-config/issues/1621"&gt;Support encoded URIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-circuitbreaker" class="anchor" name="spring-cloud-circuitbreaker"&gt;&lt;/a&gt;Spring Cloud CircuitBreaker&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/issues/94"&gt;Support Resilience4J Configuration Properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-circuitbreaker/issues/86"&gt;Support Resilience4J Bulkhead Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-kubernetes" class="anchor" name="spring-cloud-kubernetes"&gt;&lt;/a&gt;Spring Cloud Kubernetes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/issues/517"&gt;Spring Cloud Kubernetes DiscoveryClient Initialized With Health Indicator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#spring-cloud-consul" class="anchor" name="spring-cloud-consul"&gt;&lt;/a&gt;Spring Cloud Consul&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/issues/583"&gt;Disable ribbon auto config if consul discovery disabled&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following modules were updated as part of Hoxton.SR11:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Module &lt;/th&gt;
      &lt;th&gt;Version &lt;/th&gt;
      &lt;th&gt;Issues&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Starter Build &lt;/td&gt;
      &lt;td&gt;Hoxton.SR11 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Netflix &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-netflix/milestone/101?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Openfeign &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-openfeign/milestone/35?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Config &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-config/milestone/90?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gateway &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-gateway/milestone/50?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Gcp &lt;/td&gt;
      &lt;td&gt;1.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Commons &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-commons/milestone/88?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Consul &lt;/td&gt;
      &lt;td&gt;2.2.7.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-consul/milestone/55?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Contract &lt;/td&gt;
      &lt;td&gt;2.2.7.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-contract/milestone/76?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Kubernetes &lt;/td&gt;
      &lt;td&gt;1.1.9.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-kubernetes/milestone/23?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Sleuth &lt;/td&gt;
      &lt;td&gt;2.2.8.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/milestone/89?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Stream &lt;/td&gt;
      &lt;td&gt;Horsham.SR12 &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Function &lt;/td&gt;
      &lt;td&gt;3.0.14.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Bus &lt;/td&gt;
      &lt;td&gt;2.2.4.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Circuit Breaker &lt;/td&gt;
      &lt;td&gt;1.0.5.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud Security &lt;/td&gt;
      &lt;td&gt;2.2.5.RELEASE &lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Spring Cloud ZooKeeper &lt;/td&gt;
      &lt;td&gt;2.2.5.RELEASE &lt;/td&gt;
      &lt;td&gt;(&lt;a href="https://github.com/spring-cloud/spring-cloud-zookeeper/milestone/35?closed=1"&gt;issues&lt;/a&gt;)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href="https://github.com/spring-cloud/"&gt;GitHub&lt;/a&gt;, on &lt;a href="https://gitter.im/spring-cloud/spring-cloud"&gt;Gitter&lt;/a&gt;, on &lt;a href="https://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/SpringCloud"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependencyManagement&amp;gt;&#xD;
    &amp;lt;dependencies&amp;gt;&#xD;
        &amp;lt;dependency&amp;gt;&#xD;
            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&#xD;
            &amp;lt;version&amp;gt;Hoxton.SR11&amp;lt;/version&amp;gt;&#xD;
            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&#xD;
            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&#xD;
        &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;/dependencies&amp;gt;&#xD;
&amp;lt;/dependencyManagement&amp;gt;&#xD;
&amp;lt;dependencies&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    &amp;lt;dependency&amp;gt;&#xD;
        &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
        &amp;lt;artifactId&amp;gt;spring-cloud-starter-netflix-eureka-client&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/dependency&amp;gt;&#xD;
    ...&#xD;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:1.0.10.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR11&amp;#39;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
  compile &amp;#39;org.springframework.cloud:spring-cloud-starter-config&amp;#39;&#xD;
  compile &amp;#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&amp;#39;&#xD;
  //...&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Data 2021.0?</title>
    <link rel="alternate" href="https://spring.io/blog/2021/04/20/what-s-new-in-spring-data-2021-0" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2021-04-15:4418</id>
    <updated>2021-04-21T13:18:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data 2021.0, codenamed Pascal, is the second release following the new six-month cadence.
It ships with refinements to many existing interfaces and programming models.
This blog post explains the following topics:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#delete-all-by-id"&gt;Introduce &lt;code&gt;deleteAllById&lt;/code&gt; for &lt;code&gt;CrudRepository&lt;/code&gt; and &lt;code&gt;ReactiveCrudRepository&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#jfr"&gt;Support for Spring Core Java Flight Recorder (JFR) metrics.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#query-by-example"&gt;&lt;code&gt;QueryByExample&lt;/code&gt; for R2DBC and Oracle support.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#kotlin"&gt;Enable Type- and Refactoring-safe Use of &lt;code&gt;KProperty&lt;/code&gt; and &lt;code&gt;KPropertyPath&lt;/code&gt; for Property Path Rendering.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#cassandra"&gt;Enable Cassandra Prepared Statements for Repositories and &lt;code&gt;CassandraTemplate&lt;/code&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#mongodb"&gt;Document Unwrapping Support &amp;amp; Relaxed Aggregation Type Checks for MongoDB.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repository projections &amp;amp; function execution for Apache Geode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#solr"&gt;Remove Spring Data Solr from the release train.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#jmolecules"&gt;Support for &lt;a href="https://github.com/xmolecules/jmolecules"&gt;jMolecules&lt;/a&gt;.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#spring-data-rest"&gt;Spring Data REST aggregate reference mapping in DTOs.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="delete-all-by-id"&gt;&lt;a class="anchor" href="#delete-all-by-id"&gt;&lt;/a&gt;Introduce &lt;code&gt;deleteAllById&lt;/code&gt; for &lt;code&gt;CrudRepository&lt;/code&gt; and &lt;code&gt;ReactiveCrudRepository&lt;/code&gt;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Since its inception, &lt;code&gt;CrudRepository&lt;/code&gt; has defined a method to delete individual entities by their identifiers.
Back in the 1.x development line, &lt;code&gt;delete(¡¦)&lt;/code&gt; methods were overloaded to accept various argument types following &lt;code&gt;delete(ID id)&lt;/code&gt; and &lt;code&gt;delete(Iterable&amp;lt;? extends T&amp;gt; entities)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the Spring Data 2.0 release, we renamed the &lt;code&gt;CrudRepository&lt;/code&gt; methods to express what argument a particular method would accept. After the rename, the methods looked like &lt;code&gt;deleteById(ID id)&lt;/code&gt; and &lt;code&gt;deleteAll(Iterable&amp;lt;? extends T&amp;gt; entities)&lt;/code&gt;.
The refined naming convention allows for some room to introduce a delete method that deletes entities by their identifier.
As of this release, both, &lt;code&gt;CrudRepository&lt;/code&gt; and &lt;code&gt;ReactiveCrudRepository&lt;/code&gt; define &lt;code&gt;deleteAllById(Iterable&amp;lt;? extends ID&amp;gt; ids)&lt;/code&gt; to delete multiple entities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Depending on the actual store module, this can be a batch delete (delete by query) if supported by the data store.
The JPA implementation, for example, still materializes all entities first to immediately remove them, so that lifecycle callbacks are still invoked for the instances about to be deleted.
An additional &lt;code&gt;deleteAllByIdInBatch(¡¦)&lt;/code&gt; has been introduced in &lt;code&gt;JpaRepoository&lt;/code&gt; to also provide the faster execution variant using a batch query.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="jfr"&gt;&lt;a class="anchor" href="#jfr"&gt;&lt;/a&gt;Support for Spring Core Java Flight Recorder (JFR) metrics&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://docs.oracle.com/javacomponents/jmc-5-5/jfr-runtime-guide/preface_jfrrt.htm#JFRRT165"&gt;Java Flight Recorder (JFR)&lt;/a&gt; is a tool to collect, diagnose, and profile data about a running Java application.
Its tight integration with the Java runtime allows low-overhead collection of events in production environments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data repositories are typically bootstrapped on application startup, so they naturally contribute to startup time.
The Pascal release introduces integration with Spring Framework&amp;#8217;s support for capturing &lt;a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/metrics/jfr/FlightRecorderApplicationStartup.html"&gt;startup events&lt;/a&gt;, available since version 5.3.
By enabling JFR recording, you can collect and analyze the following repository startup events:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;For each enabled Spring Data module (&lt;code&gt;@Enable¡¦Repositories&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.scanning&lt;/code&gt;: Repository interface scanning&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;For each Repository&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.init&lt;/code&gt;: Repository initialization&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.metadata&lt;/code&gt;: Metadata retrieval&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.composition&lt;/code&gt;: Assembly of the repository composition&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.target&lt;/code&gt;: Repository target creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.proxy&lt;/code&gt;: Repository proxy creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.data.repository.postprocessors&lt;/code&gt;: Repository proxy post-processing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can enable JFR recording by starting your application with &lt;code&gt;java -XX:StartFlightRecording:filename=recording.jfr,duration=10s -jar ¡¦&lt;/code&gt; on all Java 9 or newer runtimes or Java 8 update 262 or later.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="kotlin"&gt;&lt;a class="anchor" href="#kotlin"&gt;&lt;/a&gt;Type- and Refactoring-safe Use of &lt;code&gt;KProperty&lt;/code&gt; and &lt;code&gt;KPropertyPath&lt;/code&gt; for Property Path Rendering&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring Data Kotlin integration is a strong driver for "syntactic sugar" enhancements of our language-specific extensions.
Kotlin allows referencing individual properties as property references (&lt;code&gt;data class Book(val title: String)&lt;/code&gt;, &lt;code&gt;Book::title&lt;/code&gt;). They are refactoring- and compile-safe, as the Kotlin compiler immediately rejects invalid references.
Modern IDE support considers property references when renaming a property, eliminating the risk of lingering references within plain strings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-data-mongodb/issues/3007"&gt;Spring Data MongoDB 2.2&lt;/a&gt; introduced support for &lt;code&gt;KProperty&lt;/code&gt; and &lt;code&gt;KPropertyPath&lt;/code&gt; for its &lt;code&gt;Criteria&lt;/code&gt; API&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;strong&gt;Classic usage of properties&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="kotlin"&gt;val classic = Criteria("title").isEqualTo("Moby-Dick")
  .and("price").lt(950)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="kotlin"&gt;val typed = (Book::title isEqualTo "Moby-Dick")
  .and(Book::price).lt(950)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data Commons 2.5 promotes &lt;code&gt;KPropertyPath&lt;/code&gt; as a top-level concept in Spring Data.
To not require extensions or changes to all methods that accept a property path,  you can use`KPropertyPath` with existing Spring Data utilities by rendering the property path:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="kotlin"&gt;// KPropertyPath variant
Sort.by((Book::author / Author::name).toDotPath())

// String-path equivalent
Sort.by("author.name")

// KPropertyPath variant
ExampleMatcher.matching()
  .withMatcher((Book::author / Author::name).toDotPath(), contains())

// String-path equivalent
ExampleMatcher.matching()
  .withMatcher("author.name", contains())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="solr"&gt;&lt;a class="anchor" href="#solr"&gt;&lt;/a&gt;Removal of Spring Data for Apache Solr from the Release Train&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release train no longer ships with Spring Data for Apache Solr. After &lt;a href="https://spring.io/blog/2020/04/07/spring-data-for-apache-solr-discontinued"&gt;deprecating Spring Data Solr in 2020&lt;/a&gt;, the team has decided to discontinue maintenance of the Solr module.
However, we are going to keep shipping service releases for the maintained 4.2 and 4.3 development lines until they reach their end of life in May 2021 and November 2021, respectively.
Moving forward, we recommend using &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/"&gt;Spring Data Elasticsearch&lt;/a&gt; as the Spring Data module of choice for full-text search arrangements.
Spring Data Elasticsearch is an actively maintained community module.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="query-by-example"&gt;&lt;a class="anchor" href="#query-by-example"&gt;&lt;/a&gt;&lt;code&gt;QueryByExample&lt;/code&gt; for R2DBC and Oracle support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#query-by-example"&gt;Query by Example&lt;/a&gt; is a user-friendly querying technique with a simple interface.
It allows dynamic query creation and does not require writing queries that contain field names.
In fact, Query by Example does not require you to write queries by using SQL at all.
It is available for multiple Spring Data modules.
As of Spring Data R2DBC 1.3, you can query relational data by using examples through Spring Data R2DBC&amp;#8217;s implementation of &lt;code&gt;ReactiveQueryByExampleExecutor&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;PersonRepository people  = ¡¦;
DatabaseClient client = ¡¦;

var skyler = new Person(null, "Skyler", "White", 45);
var walter = new Person(null, "Walter", "White", 50);
var flynn = new Person(null, "Walter Jr. (Flynn)", "White", 17);
var marie = new Person(null, "Marie", "Schrader", 38);
var hank = new Person(null, "Hank", "Schrader", 43);

var example = Example.of(new Person(null, null, "White", null));

people.count(example).as(StepVerifier::create)
  .expectNext(3L)
  .verifyComplete();


var example = Example.of(new Person(null, "Walter", "WHITE", null), matching()
  .withIgnorePaths("age"). //
  .withMatcher("firstname", startsWith())
  .withMatcher("lastname", ignoreCase()));

people.findAll(example).collectList()
  .as(StepVerifier::create)
  .consumeNextWith(actual -&amp;gt; {
    assertThat(actual).containsExactlyInAnyOrder(flynn, walter);
  })
  .verifyComplete();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Alongside other improvements, you can use Spring Framework 5.3.6 and Spring Data R2DBC 1.3 with Oracle&amp;#8217;s &lt;a href="https://github.com/oracle/oracle-r2dbc"&gt;&lt;code&gt;oracle-r2dbc&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;com.oracle.database.r2dbc:oracle-r2dbc&lt;/code&gt;) driver. Creating &lt;code&gt;DatabaseClient&lt;/code&gt; or &lt;code&gt;R2dbcEntityTemplate&lt;/code&gt; by using the Oracle &lt;code&gt;ConnectionFactory&lt;/code&gt; selects the appropriate bind marker strategy and dialect.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="cassandra"&gt;&lt;a class="anchor" href="#cassandra"&gt;&lt;/a&gt;Enabling Cassandra Prepared Statements for Repositories and &lt;code&gt;CassandraTemplate&lt;/code&gt;&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data for Apache Cassandra accommodates for Cassandra-specific features wherever possible.
Since its major rewrite in version 2.0, we introduced &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/current/api/org/springframework/data/cassandra/core/cql/support/CachedPreparedStatementCreator.html"&gt;&lt;code&gt;CachedPreparedStatementCreator&lt;/code&gt;&lt;/a&gt; for prepared statement caching on the &lt;code&gt;CqlTemplate&lt;/code&gt; level, which allowed the use of prepared statements using plain CQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With this release, we bring prepared statement support on &lt;code&gt;CassandraTemplate&lt;/code&gt; and its reactive and asynchronous variants.
In fact, prepared statements are enabled by default. The main difference between &lt;code&gt;CqlTemplate&lt;/code&gt; and &lt;code&gt;CassandraTemplate&lt;/code&gt; is the abstraction level and the responsibility of CQL statement creation. &lt;code&gt;CqlTemplate&lt;/code&gt; requires CQL as input. &lt;code&gt;CassandraTemplate&lt;/code&gt; uses entities as input and generates CQL statements based on the actual action that should be performed using the entity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The change to provide prepared statement functionality comes with a few changes when issuing queries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="olist arabic"&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;
&lt;p&gt;Parameters are bound by index when using &lt;code&gt;StatementBuilder&lt;/code&gt;. &lt;code&gt;StatementBuilder&lt;/code&gt; is used in all arrangements when building CQL queries for entity-related operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When binding parameters by index, inspecting a &lt;code&gt;SimpleStatement&lt;/code&gt; renders parameter bind markers within its CQL. CQL logging of &lt;code&gt;CqlTemplate&lt;/code&gt; is affected by this change as well: The logged CQL contains now &lt;code&gt;?&lt;/code&gt; instead of the literal value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;These changes are required to allow statement preparation of parameterized statements.
A statement to run is first prepared. Then, in a second step, it is bound with its actual parameters and then sent to the server for execution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Cassandra&amp;#8217;s Java driver keeps track of prepared statement caching, so no work is required in terms of bean setup.
Generally, you should experience a better query performance.
Also, keep in mind that prepared statement caching requires additional memory to keep track of the prepared statement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can disable prepared statement usage on &lt;code&gt;CassandraTemplate&lt;/code&gt; and its reactive and asynchronous variants:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;var template = new CassandraTemplate(session);
template.setUsePreparedStatements(false);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find more detail in the &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/current/reference/html/#cassandra.template.prepared-statements"&gt;Spring Data for Apache Cassandra reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="mongodb"&gt;&lt;a class="anchor" href="#mongodb"&gt;&lt;/a&gt;Document Unwrapping Support &amp;amp; Relaxed Aggregation Type Checks for MongoDB&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Value objects and record types help us create clearly structured domain models with maximum expressiveness.
However, persisting those finely crafted models does not necessarily lead to a well-structured database document.
What looks good in Java or Kotlin may cause unintended repetition of property names and deeply nested structures in the MongoDB native Document format that embeds entities within their parent structure.
Consider the following trivial snippet and its representation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class User {
  private String id;
  private Email email;
  // ¡¦
}

record Email (String email) {}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="json"&gt;{
  "_id" : "9708-ac32-beb0",
  "email" : {
    "email" : "me@home.somewhere"
  },
  // ¡¦
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Although this works, it is obviously not an idiomatic representation for a document store, and that is exactly where &lt;code&gt;@Unwrapped&lt;/code&gt; comes into play.
The annotation lets you flatten out (unwrap) a property into its parent:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt; class User {
  private String id;
  @Unwrapped(onEmpty = OnEmpty.USE_NULL)
  private Email email;
  // ¡¦
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;@Unwrapped&lt;/code&gt; forces you to make a decision about how nonexistent values are treated by choosing an &lt;code&gt;onEmpty&lt;/code&gt; (none of the fields represented by the record is present) behavior.
For those of you who prefer less verbose annotations, feel free to use &lt;code&gt;@Unwrapped.Nullable&lt;/code&gt; as an alternative or to create your own annotation by using &lt;code&gt;@Unwrapped&lt;/code&gt; as a meta annotation.
Either way, the resulting document looks much more appealing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="json"&gt;{
  "_id" : "9708-ac32-beb0",
  "email" : "me@home.somewhere",
  // ¡¦
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both repositories and &lt;code&gt;MongoTemplate&lt;/code&gt; are able to deal with unwrapped properties.
See the &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/3.2.0/reference/html/#unwrapped-entities"&gt;reference documentation&lt;/a&gt; for more information. Also, check out the &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/211d1440a26eebe407ae044eca4f7318232299b8/mongodb/example/src/test/java/example/springdata/mongodb/unwrapping/UnwrappingIntegrationTests.java"&gt;examples for &lt;code&gt;@Unwrapped&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="jmolecules"&gt;&lt;a class="anchor" href="#jmolecules"&gt;&lt;/a&gt;Support for jMolecules&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Spring Data repository abstraction has always been a core concept within the project.
It is a programming model for an architectural concept coined in Domain-Driven Design (DDD): the repository abstracts a collection of aggregates.
In fact, Spring Framework itself aligns with a few other abstractions originating in DDD (such as services) and provides annotations to express them in user code.
However, users often do not like to use framework-specific annotations and abstractions to express those concepts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://github.com/xmolecules/jmolecules"&gt;jMolecules&lt;/a&gt; project focuses solely on providing annotation and type-based abstractions with which different architectural concepts for technology can integrate.
It essentially inverts the relationship: user code depends only on jMolecules annotations and interfaces, and technology integration is then provided&amp;#8201;&amp;#8212;&amp;#8201;in a second step&amp;#8201;&amp;#8212;&amp;#8201;either from &lt;a href="https://github.com/xmolecules/jmolecules-integrations"&gt;the extensive jMolecules integrations library&lt;/a&gt; or the frameworks themselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="modeling-associations"&gt;&lt;a class="anchor" href="#modeling-associations"&gt;&lt;/a&gt;Modeling Associations&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;One of the core abstractions in the Domain-Driven Design module of jMolecules is the &lt;code&gt;Association&lt;/code&gt; interface.
It is typed to an &lt;code&gt;AggregateRoot&lt;/code&gt; as well as its &lt;code&gt;Identifier&lt;/code&gt; and is used in domain models to express a relationship to an aggregate in a strongly typed way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;class Order implements AggregateRoot&amp;lt;Order, OrderIdentifier&amp;gt; {

  OrderIdentifier id;
  Association&amp;lt;Customer, CustomerIdentifier&amp;gt; customer;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Both &lt;code&gt;Order&lt;/code&gt; and &lt;code&gt;Customer&lt;/code&gt; are aggregates in this model, and the association between the two is explicitly mapped through the jMolecules &lt;code&gt;Association&lt;/code&gt; type.
Spring Data 2021.0.0 ships mapping support for &lt;code&gt;Association&lt;/code&gt;s.
They are properly detected as Spring Data associations and converted by using the identifier backing the instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To transparently enable the support for those abstractions, add &lt;code&gt;org.jmolecules.integrations:jmolecules-spring&lt;/code&gt; to your classpath.
Spring Data&amp;#8217;s mapping infrastructure detects that and automatically registers the necessary converters in the conversion parts of our object mapping facilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Support for &lt;code&gt;Association&lt;/code&gt; instances is also provided for JPA. However, in this case, Spring Data does not provide the actual translation, which is provided through integration with &lt;code&gt;AttributeConverter&lt;/code&gt; implementations provided by jMolecules itself.
Using &lt;a href="https://github.com/xmolecules/jmolecules-integrations/tree/main/jmolecules-bytebuddy#reduce-boilerplate-for-aggregateroot-implementations"&gt;its ByteBuddy extension&lt;/a&gt; you can generate the necessary &lt;code&gt;AttributeConverter&lt;/code&gt; implementations and annotation configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="mapping-between-identifiers-and-aggregate-instances"&gt;&lt;a class="anchor" href="#mapping-between-identifiers-and-aggregate-instances"&gt;&lt;/a&gt;Mapping between identifiers and aggregate instances&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;jMolecules' &lt;code&gt;Identifier&lt;/code&gt; interface incentivizes the use of dedicated identifier types for aggregates, as in the &lt;code&gt;OrderIdentifier&lt;/code&gt; and &lt;code&gt;CustomerIdentifier&lt;/code&gt; type used in the earlier example.
When serializing the &lt;code&gt;Association&lt;/code&gt;, we now effectively have to translate the instance into a &lt;code&gt;CustomerIdentifier&lt;/code&gt; by calling &lt;code&gt;Association.getId()&lt;/code&gt; and &lt;code&gt;Identifier.getId()&lt;/code&gt; in turn to get to the value to actually persist.
To materialize the association, we have to take the raw persisted value, create a &lt;code&gt;CustomerIdentifier&lt;/code&gt; instance by using an exposed, static factory method named &lt;code&gt;¡¦.of(¡¦)&lt;/code&gt; and eventually call &lt;code&gt;Association.of(¡¦)&lt;/code&gt; again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;All these translation steps are implemented in &lt;a href="https://github.com/xmolecules/jmolecules-integrations"&gt;&lt;code&gt;jmolecules-integrations&lt;/code&gt;&lt;/a&gt; and transparently added by Spring Data to the Spring &lt;code&gt;ConversionService&lt;/code&gt; for use by the framework.
Assuming the &lt;code&gt;OrderIdentifier&lt;/code&gt; is backed by a &lt;code&gt;String&lt;/code&gt; representation of a &lt;code&gt;UUID&lt;/code&gt;, that also means that Spring Data&amp;#8217;s &lt;code&gt;DomainClassConverter&lt;/code&gt; is able to automatically bind a fully materialized aggregate instance to a Spring MVC controller method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@RestController
class MyController {

  @GetMapping("/orders/{id}")
  HttpEntity&amp;lt;?&amp;gt; getOrders(@PathVariable("id") Order order) { /* ¡¦ */ }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this example, a GET request to &lt;code&gt;/orders/462a692d-¡¦&lt;/code&gt; automatically translates &lt;code&gt;462a692d-¡¦&lt;/code&gt; into an &lt;code&gt;OrderIdentifier&lt;/code&gt; by using the jMolecules converters first and then using the repository declared for &lt;code&gt;Order&lt;/code&gt; to look up the aggregate instance.
While the &lt;a href="https://docs.spring.io/spring-data/commons/docs/current/reference/html/#core.web.basic.domain-class-converter"&gt;general mechanism&lt;/a&gt; has been available for quite a while in Spring Data, the 2021.0.0 release adds the necessary, additional integration for jMolecules &lt;code&gt;Identifier&lt;/code&gt; implementations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="spring-data-rest"&gt;&lt;a class="anchor" href="#spring-data-rest"&gt;&lt;/a&gt;Spring Data REST Aggregate Reference Mapping for DTOs&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The previously mentioned jMolecules &lt;code&gt;Converter&lt;/code&gt; implementations are also used in all places in which Spring Data REST needs to obtain and transform aggregate identifiers into URIs.
The module also ships with a new Jackson deserializer that allows binding Spring Data REST managed aggregate instances into DTOs by deserializing URIs properly.
Assume you have &lt;code&gt;Order&lt;/code&gt; managed by Spring Data REST and exposed through &lt;code&gt;/orders/¡¦&lt;/code&gt; and a customer controller arrangement that looks like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="java"&gt;@BasePathAwareController
class MyCustomController {

  @PostMapping("/orders")
  HttpEntity&amp;lt;?&amp;gt; postOrder(@RequestBody MyDto payload) {
    /* Process submission */
  }
}

@Data
class MyDto {
  List&amp;lt;Order&amp;gt; orders;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now also assume the following payload submitted for the request:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code data-lang="json"&gt;{
  "orders" : [
    "¡¦/orders/462a692d-¡¦"
  ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Despite &lt;code&gt;MyDto&lt;/code&gt; being an ordinary data transfer object, the &lt;code&gt;payload&lt;/code&gt; instance contains the aggregate instance identified by &lt;code&gt;462a692d-¡¦&lt;/code&gt; as an element of the &lt;code&gt;orders&lt;/code&gt; link.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;!-- rendered by Sagan Renderer Service --&gt;</content>
  </entry>
</feed>
